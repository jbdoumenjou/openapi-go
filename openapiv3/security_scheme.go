package openapiv3

// SecurityScheme defines a security scheme that can be used by the operations ([ref]).
//
// Supported schemes are:
//   - HTTP authentication,
//   - an API key (either as a header, a cookie parameter or as a query parameter),
//   - mutual TLS (use of a client certificate),
//   - OAuth2â€™s common flows (implicit, password, client credentials and authorization code) as defined in [RFC6749],
//   - and [OpenID Connect Discovery].
//
// Please note that as of 2020,
// the implicit flow is about to be deprecated by [OAuth 2.0 Security Best Current Practice].
// Recommended for most use case is Authorization Code Grant flow with PKCE.
//
// Example:
//
//	{
//	 "type": "oauth2",
//	 "flows": {
//	   "implicit": {
//	     "authorizationUrl": "https://example.com/api/oauth/dialog",
//	     "scopes": {
//	       "write:pets": "modify pets in your account",
//	       "read:pets": "read your pets"
//	     }
//	   },
//	   "authorizationCode": {
//	     "authorizationUrl": "https://example.com/api/oauth/dialog",
//	     "tokenUrl": "https://example.com/api/oauth/token",
//	     "scopes": {
//	       "write:pets": "modify pets in your account",
//	       "read:pets": "read your pets"
//	     }
//	   }
//	 }
//	}
//
// This object MAY be extended with [Specification Extensions].
//
// [ref]: https://spec.openapis.org/oas/latest.html#security-scheme-object
// [RFC6749]: https://spec.openapis.org/oas/latest.html#bib-RFC6749
// [OpenID Connect Discovery]: https://tools.ietf.org/html/draft-ietf-oauth-discovery-06
// [OAuth 2.0 Security Best Current Practice]: https://tools.ietf.org/html/draft-ietf-oauth-security-topics
// [Specification Extensions]: https://spec.openapis.org/oas/latest.html#specificationExtensions
type SecurityScheme struct {
	// REQUIRED. The type of the security scheme.
	// Valid values are "apiKey", "http", "mutualTLS", "oauth2", "openIdConnect".
	Type string `json:"type"`
	// A description for security scheme.
	// CommonMark syntax (https://spec.commonmark.org/) MAY be used for rich text representation.
	Description string `json:"description,omitempty"`
	// REQUIRED. The name of the header, query or cookie parameter to be used.
	Name string `json:"name"`
	// REQUIRED. The location of the API key.
	// Valid values are "query", "header" or "cookie".
	In string `json:"in"`
	// REQUIRED.
	// The name of the HTTP Authorization scheme to be used in the Authorization header as defined in [RFC7235] (https://spec.openapis.org/oas/latest.html#bib-RFC7235).
	// The values used SHOULD be registered in the IANA Authentication Scheme registry (https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml).
	Scheme string `json:"scheme"`
	// A hint to the client to identify how the bearer token is formatted.
	// Bearer tokens are usually generated by an authorization server,
	// so this information is primarily for documentation purposes.
	BearerFormat string `json:"bearerFormat,omitempty"`
	// REQUIRED. An object containing configuration information for the flow types supported.
	Flows OAuthFlows `json:"flows"`
	// REQUIRED.
	// OpenId Connect URL to discover OAuth2 configuration values.
	// This MUST be in the form of a URL.
	// The OpenID Connect standard requires the use of TLS.
	OpenIDConnectURL string `json:"openIdConnectUrl"`
}
